#!/usr/bin/env node

var program = require('commander')
    , async = require('async')
    , path = require('path')
    , spawn = require('child_process').spawn
    , fs = require('fs')
    , rmdir = require('rimraf')
    , glob = require('glob')
    , logger = require('bunyan').createLogger({ name: 'verquire' });

function parseInt(val, def) {
    return isNaN(val) ? def : +val;
}
 
program
    .version(require(path.join(__dirname, '..', 'package.json')).version);

program
    .command('create <verquire_dir>')
    .description('install Node.js modules for use by verquire')
    .option('-s --spec <package_spec>', 'package spec file')
    .option('-e --errors <out_file>', 'package spec file for modules that failed to install')
    .option('-c --concurrent <limit>', 'limit concurrent module installations', parseInt, 4)
    .action(verquire_action);


program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
    process.exit(1);
}

function verquire_action(verquire_dir, options) {
    options.spec = options.spec || path.join(__dirname, 'packages.json');

    logger.info({ 
        spec: options.spec, 
        concurrent: options.concurrent, 
        verquire_dir: verquire_dir
    }, 'verquire start');

    if (!fs.existsSync(verquire_dir)) {
        logger.error({ verquire_dir: verquire_dir }, 'directory does not exists');
        process.exit(1);
    }

    var spec = require(options.spec);

    var errors = {};
    var cache = {};
    async.eachLimit(Object.keys(spec), options.concurrent, function (name, callback) {
        async.eachLimit(spec[name], 1, function (version, callback) {
            logger.info({ module: name + '@' + version }, 'installing');
            var verdir = path.join(verquire_dir, name, version);
            var exists;
            async.series([
                function (callback) {
                    // check if installation directory already exists
                    fs.exists(verdir, function (result) {
                        exists = result;
                        callback();
                    });
                },
                function (callback) {
                    // remove directory if exists
                    if (!exists)
                        return callback();
                    rmdir(verdir, callback);
                },
                function (callback) {
                    // create directory structure for versioned module
                    fs.mkdir(path.join(verquire_dir, name), function () {
                        fs.mkdir(verdir, function () {
                            fs.mkdir(path.join(verdir, 'node_modules'), callback);
                        });
                    });
                },
                function (callback) {
                    // run npm to get the specific version
                    var npm = spawn('npm', ['i', name + '@' + version], {
                        env: process.env,
                        cwd: verdir,
                        stdio: 'inherit'
                    });
                    npm.once('close', function (code) {
                        code ? npm.emit('done', new Error('npm exit code ' + code)) : npm.emit('done');
                    });
                    npm.once('error', function (e) { npm.emit('done', e); });
                    npm.once('done', callback);
                },
                function (callback) {
                    // minimize size by reusing modules with symlinks
                    glob('package.json', {
                        matchBase: true,
                        nodir: true,
                        cwd: verdir
                    }, function (error, list) {
                        if (error)
                            return callback(error);

                        // sort by directory depth
                        list.sort(function (a, b) {
                          return a.split('/').length - b.split('/').length;
                        });

                        logger.info({
                            count: list.length,
                            module: name + '@' + version
                        }, 'inspecting dependencies');

                        var exclude_paths = [];
                        for (var i = 0; i < list.length; i++) {
                            var package_file = list[i];
                            var package_json = path.join(verdir, package_file);
                            var module_path = path.join(package_json, '..');
                            var exclude = false;
                            for (var k = 0; k < exclude_paths.length; k++) {
                                if (module_path.indexOf(exclude_paths[k]) === 0) {
                                    exclude = true;
                                    break;
                                }
                            }
                            if (exclude) {
                                // logger.error({
                                //     module: package_file,
                                //     dependency_of: name + '@' + version,
                                //     exclude_paths: exclude_paths
                                // }, 'skipping module symlinked at higher level');
                                continue;
                            }
                            var json;
                            try {
                                json = require(package_json);
                            }
                            catch (e) {
                                logger.warn({ package_json: package_json }, 'unable to read package.json');
                                continue;
                            }
                            var module_name = json.name + '@' + json.version;
                            if (cache[module_name]) {
                                // module is already installed; create symlink
                                try {
                                    rmdir.sync(module_path);
                                }
                                catch (e) {
                                    logger.warn({ 
                                        module_path: module_path 
                                    }, 'unable to remove path');
                                    continue;
                                }
                                try {
                                    fs.symlinkSync(cache[module_name], module_path);
                                }
                                catch (e) {
                                    logger.warn({ 
                                        error: e.message || e.toString(),
                                        dest_module_path: module_path, 
                                        src_module_path: cache[module_name]
                                    }, 'unable to create symlink');
                                    continue;                                    
                                }
                                logger.info({ 
                                    dest_module_path: module_path, 
                                    src_module_path: cache[module_name]
                                }, 'created symlink');
                                // break the loop once we get to dependency modules
                                exclude_paths.push(module_path);
                            }
                            else {
                                // module not installed yet, add to cache
                                logger.info({ 
                                    module: module_name, 
                                    path: module_path
                                }, 'adding module to cache');
                                cache[module_name] = module_path;
                            }
                        }
                        callback();
                    });
                },
                function (callback) {
                    // validate installation
                    var node = spawn('node', ['-e', 'require("' + name + '");'], {
                        env: process.env,
                        cwd: verdir,
                        stdio: 'inherit'
                    });
                    node.once('close', function (code) {
                        code ? node.emit('done', new Error('node exit code ' + code)) : node.emit('done');
                    });
                    node.once('error', function (e) { node.emit('done', e); });
                    node.once('done', callback);
                }
            ], function (error) {
                if (error) {
                    logger.error({ 
                        error: (error.message || error.stack || error.toString()),
                        module: name + '@' + version
                    }, 'error installing');
                    errors[name] = errors[name] || {};
                    errors[name][version] = error instanceof Error ? error.message : error;
                    rmdir(verdir, function () {
                        // remove module subdirectory if empty
                        fs.rmdir(path.join(verquire_dir, name), function () {
                            callback();
                        });
                    });
                }
                else {
                    logger.info({
                        module: name + '@' + version
                    }, 'installed');
                    callback();
                }
            });
        }, callback);
    }, function (error) {
        if (error) {
            logger.error(error);
            process.exit(1);
        }
        if (Object.keys(errors).length > 0) {
            logger.error(errors, 'some modules failed to install');
            if (options.errors) {
                for (var name in errors) {
                    errors[name] = Object.keys(errors[name]);
                }
                fs.writeFileSync(options.errors, JSON.stringify(errors, null, 2), 'utf8');
            }
            process.exit(2);
        }
        else {
            logger.info('finished with no errors');
        }
    });
}

