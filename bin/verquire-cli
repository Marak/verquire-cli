#!/usr/bin/env node

var program = require('commander')
    , async = require('async')
    , path = require('path')
    , spawn = require('child_process').spawn
    , execSync = require('child_process').execSync
    , fs = require('fs')
    , rmdir = require('rimraf')
    , glob = require('glob')
    , semver = require('semver')
    , logger = require('bunyan').createLogger({ name: 'verquire' });

const npm_bin = require.resolve(`npm/${require('npm/package.json').bin.npm}`);

function parseInt(val, def) {
    return isNaN(val) ? def : +val;
}

program
    .version(require(path.join(__dirname, '..', 'package.json')).version);

program
    .command('install <verquire_dir>')
    .description('install Node.js modules for use by verquire')
    .option('-s --spec <package_spec>', 'package spec file')
    .option('-e --errors <out_file>', 'package spec file for modules that failed to install')
    .option('-i --incremental', 'support an incremental build where an existing verquire directory is preserved')
    .option('-t --tests <test_file>', 'custom smoke tests for modules')
    .option('-u --fixup <fixup_file>', 'custom fixup per module')
    .option('-p --skipopt <skipopt_file>', 'array of modules to skip optimization for')
    .option('-k --keep', 'keep artifacts of modules that failed installing')
    .option('-r --error', 'quit on first error')
    .option('-c --concurrent <limit>', 'limit concurrent module installations', parseInt, 4)
    .action(install_action);

program
    .command('update-spec')
    .description('update package spec with latest module versions')
    .option('-s --spec <package_spec>', 'input package spec file')
    .option('-o --out <out_file>', 'updated package spec file')
    .option('-e --errors <error_file>', 'package spec file for modules that failed to install')
    .option('-c --concurrent <limit>', 'limit concurrent module installations', parseInt, 4)
    .action(update_action);

program
    .command('blacklist-spec')
    .description('update package spec by removing blacklisted modules')
    .option('-s --spec <package_spec>', 'input package spec file')
    .option('-b --blacklist <blacklist_file>', 'blacklist spec file')
    .option('-o --out <out_file>', 'updated package spec file')
    .action(blacklist_action);

program
    .command('node-modules <verquire_dir> <node_modules_dir>')
    .option('-i --incremental', 'support adding new module versions to node_modules')
    .description('populate node_modules using default versions of verquire modules')
    .action(node_modules_action);


program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
    process.exit(1);
}

function node_modules_action(verquire_dir, node_modules_dir, options) {
    logger.info({
        spec: options.spec,
        concurrent: options.concurrent,
        incremental: options.incremental,
        verquire_dir: verquire_dir
    }, 'node-modules start');

    if (!fs.existsSync(verquire_dir)) {
        logger.error({ verquire_dir: verquire_dir }, 'directory does not exists');
        process.exit(1);
    }

    if (!fs.existsSync(node_modules_dir)) {
        logger.error({ node_modules_dir: node_modules_dir }, 'directory does not exists');
        process.exit(1);
    }

    var spec = require(path.join(path.resolve(verquire_dir), 'packages.json'));

    async.eachLimit(Object.keys(spec), 10, function (name, callback) {
        var src = path.join(path.resolve(verquire_dir), name, spec[name][0], 'node_modules', name);
        var dest = path.join(path.resolve(node_modules_dir), name);
        fs.rmdir(dest, function () {
            async.series([
                function (cb) {
                    // For complex module names like @kikinteractive/kik,
                    // ensure the destination directory structure is created
                    // up to the second to last element of the directory path
                    var structure = name.split('/');
                    structure.splice(structure.length - 1);
                    if (!structure.length) return cb();
                    var subpath = path.resolve(node_modules_dir);
                    async.eachSeries(structure, function (p, cb) {
                        subpath = path.join(subpath, p);
                        fs.mkdir(subpath, () => cb());
                    }, cb);
                },
                function (cb) {
                    fs.symlink(src, dest, function (error) {
                        if (error) {
                            if (options.incremental && error.code === 'EEXIST') {
                                logger.info({
                                    src: src,
                                    dest: dest,
                                    module: name + '@' + spec[name][0]
                                }, 'skipping existing default module');

                                return cb();
                            }

                            logger.error({
                                error: error.message || error.toString(),
                                src: src,
                                dest: dest,
                                module: name + '@' + spec[name][0]
                            }, 'error linking module');

                            return cb(error);
                        }

                        logger.info({
                            src: src,
                            dest: dest,
                            module: name + '@' + spec[name][0]
                        }, 'linked module');
                        cb();
                    });
                }
            ], callback);
        });
    }, function (error) {
        if (error) process.exit(1);
    });
}


function install_action(verquire_dir, options) {
    options.spec = options.spec || path.join(__dirname, 'packages.json');

    verquire_dir = path.resolve(process.cwd(), verquire_dir);

    logger.info({
        spec: options.spec,
        concurrent: options.concurrent,
        verquire_dir: verquire_dir
    }, 'verquire start');

    if (!fs.existsSync(verquire_dir)) {
        logger.error({ verquire_dir: verquire_dir }, 'directory does not exists');
        process.exit(1);
    }

    var spec = require(path.resolve(options.spec));
    var tests = options.tests ? require(path.resolve(options.tests)) : {};
    var fixups = options.fixup ? require(path.resolve(options.fixup)) : {};
    var skipopt = options.skipopt ? require(path.resolve(options.skipopt)) : [];

    var errors = {};
    var cache = {};

    const install_all = () => {
        async.eachLimit(Object.keys(spec), options.concurrent, function (name, callback) {
            const install_version = (version, callback) => {
                logger.info({ module: name + '@' + version }, 'installing');
                var verdir = path.join(verquire_dir, name, version);

                async.series([
                    function (callback) {
                        // create directory structure for versioned module
                        var structure = name.split('/');
                        structure.push(version);
                        structure.push('node_modules');
                        var subpath = verquire_dir;
                        async.eachSeries(structure, function (p, cb) {
                            subpath = path.join(subpath, p);
                            fs.mkdir(subpath, () => cb());
                        }, callback);
                    },
                    function (callback) {
                        // run npm to get the specific version
                        var npm = spawn(npm_bin, ['i', '--production', '--unsafe-perm', name + '@' + version], {
                            env: process.env,
                            cwd: verdir,
                            stdio: 'inherit'
                        });
                        npm.once('close', function (code) {
                            code ? npm.emit('done', new Error('npm exit code ' + code)) : npm.emit('done');
                        });
                        npm.once('error', function (e) { npm.emit('done', e); });
                        npm.once('done', callback);
                    },
                    function (callback) {
                        if (skipopt.indexOf(name + '@' + version) > -1) {
                            // skip optimizing submodules of this module
                            logger.info({
                                module: name + '@' + version,
                                path: verdir
                            }, 'skipping inspecting dependencies');
                            return callback();
                        }
                        // minimize size by reusing modules with symlinks
                        glob('**/node_modules/*/package.json', {
                            nodir: true,
                            cwd: verdir
                        }, function (error, list) {
                            if (error)
                                return callback(error);

                            // sort by directory depth
                            list.sort(function (a, b) {
                            return a.split('/').length - b.split('/').length;
                            });

                            logger.info({
                                count: list.length,
                                module: name + '@' + version,
                                path: verdir
                            }, 'inspecting dependencies');

                            var exclude_paths = [];
                            for (var i = 0; i < list.length; i++) {
                                var package_file = list[i];
                                var package_json = path.join(verdir, package_file);
                                var module_path = path.join(package_json, '..');
                                var exclude = false;
                                for (var k = 0; k < exclude_paths.length; k++) {
                                    if (module_path === exclude_paths[k] || module_path.indexOf(exclude_paths[k]) === 0 && module_path[exclude_paths[k].length] === '/') {
                                        exclude = true;
                                        break;
                                    }
                                }
                                if (exclude) {
                                    // logger.error({
                                    //     module: package_file,
                                    //     dependency_of: name + '@' + version,
                                    //     exclude_paths: exclude_paths
                                    // }, 'skipping module symlinked at higher level');
                                    continue;
                                }
                                var json;
                                try {
                                    json = require(package_json);
                                }
                                catch (e) {
                                    logger.warn({ package_json: package_json }, 'unable to read package.json');
                                    continue;
                                }
                                var module_name = json.name + '@' + json.version;

                                if (cache[module_name]) {
                                    // module is already installed; create symlink
                                    try {
                                        rmdir.sync(module_path);
                                    }
                                    catch (e) {
                                        logger.warn({
                                            module_path: module_path
                                        }, 'unable to remove path');
                                        continue;
                                    }
                                    try {
                                        fs.symlinkSync(cache[module_name], module_path);
                                    }
                                    catch (e) {
                                        logger.warn({
                                            error: e.message || e.toString(),
                                            dest_module_path: module_path,
                                            src_module_path: cache[module_name]
                                        }, 'unable to create symlink');
                                        continue;
                                    }
                                    logger.info({
                                        dest_module_path: module_path,
                                        src_module_path: cache[module_name]
                                    }, 'created symlink');
                                    // break the loop once we get to dependency modules
                                    exclude_paths.push(module_path);
                                }
                                else {
                                    // module not installed yet, apply fixups and add to cache

                                    if (fixups[module_name]) {
                                        logger.info({
                                            name: module_name,
                                            path: module_path,
                                            fixup: fixups[module_name]
                                        }, 'applying fixups');

                                        var fixup_result = execSync(fixups[module_name], {
                                            env: process.env,
                                            cwd: module_path
                                        });

                                        logger.info({
                                            name: module_name,
                                            path: module_path,
                                            fixup_result,
                                        }, 'completed fixup');
                                    }

                                    logger.info({
                                        module: module_name,
                                        path: module_path
                                    }, 'adding module to cache');
                                    cache[module_name] = module_path;
                                }
                            }
                            callback();
                        });
                    },
                    function (callback) {
                        test_version(version, callback);
                    }
                ], function (error) {
                    if (error) {
                        logger.error({
                            error: (error.message || error.stack || error.toString()),
                            location: verdir,
                            module: name + '@' + version
                        }, 'error installing');
                        errors[name] = errors[name] || {};
                        errors[name][version] = error instanceof Error ? error.message : error;
                        if (options.keep)
                            return callback(options.error ? error : undefined);
                        else
                            rmdir(verdir, function () {
                                // remove module subdirectory if empty
                                fs.rmdir(path.join(verquire_dir, name), function () {
                                    callback(options.error ? error : undefined);
                                });
                            });
                    }
                    else {
                        logger.info({
                            module: name + '@' + version
                        }, 'installed');
                        callback();
                    }
                });
            };
            const test_version = (version, callback) => {
                // validate installation
                var test = tests[name] || ('require("' + name + '");');
                var verdir = path.join(verquire_dir, name, version);
                logger.info({ name: name, test: test, verdir }, 'testing module')
                var node = spawn(process.execPath, ['-e', test], {
                    env: process.env,
                    cwd: verdir,
                    stdio: 'inherit'
                });
                node.once('close', function (code) {
                    code ? node.emit('done', new Error('node exit code ' + code)) : node.emit('done');
                });
                node.once('error', function (e) { node.emit('done', e); });
                node.once('done', callback);
            };

            return async.eachLimit(spec[name], 1, function (version, callback) {
                var verdir = path.join(verquire_dir, name, version);

                return fs.stat(verdir, (err, stats) => {
                    if (err && err.code !== 'ENOENT' && !stats) {
                        logger.error({ err, verdir }, 'error checking existence of directory');
                        return callback(err);
                    }

                    if (stats) {
                        if (!options.incremental) {
                            return rmdir(verdir, { glob: false }, err => {
                                if (err) {
                                    logger.error({ err, verdir }, 'error removing old verquire module');
                                    return callback(err);
                                }

                                return install_version(version, callback);
                            });
                        }

                        logger.info({
                            module: name + '@' + version,
                        }, 'skipping module for incremental build');

                        return test_version(version, callback);
                    }

                    return install_version(version, callback);
                });
            }, callback);
        }, function (error) {
            if (error) {
                logger.error(error);
                process.exit(1);
            }
            if (Object.keys(errors).length > 0) {
                logger.error({ count: Object.keys(errors).length }, 'some modules failed to install');
                if (options.errors) {
                    logger.error({ error: options.error }, 'writing error file');
                    fs.writeFileSync(options.errors, JSON.stringify(errors, null, 2), 'utf8');

                }
                else
                    logger.error(errors, 'modules failed installing');
                process.exit(2);
            }
            else {
                fs.writeFileSync(path.join(verquire_dir, 'packages.json'), JSON.stringify(spec, null, 2), 'utf8');
                logger.info('finished with no errors');
            }
        });
    };

    if (options.incremental) {
        logger.info('seeding cache prior to incremental build');
        // Build the initial cache state
        return glob('**/node_modules/*/package.json', {
            nodir: true,
            follow: false,
            cwd: verquire_dir,
        }, function (err, list) {
            if (err) {
                logger.error(err);
                return process.exit(1);
            }

            list.forEach(relpath => {
                var package_json = path.join(verquire_dir, relpath);
                var json;
                try {
                    json = require(package_json);
                }
                catch (e) {
                    logger.warn({ package_json: package_json }, 'unable to read package.json');
                    return;
                }
                var module_name = `${json.name}@${json.version}`;
                var module_path = path.dirname(package_json);
                logger.info({
                    module: module_name,
                    path: module_path,
                }, 'adding module to cache');
                cache[module_name] = module_path;
            });

            return install_all();
        });
    }

    install_all();
}

function blacklist_action(options) {
    options.spec = options.spec || path.join(__dirname, 'packages.json');

    logger.info({
        spec: options.spec,
        blacklist: options.blacklist
    }, 'blacklist-spec start');

    var spec = require(path.resolve(options.spec));
    var blacklist = options.blacklist ? require(path.resolve(options.blacklist)) : {};

    for (var name in blacklist) {
        if (spec[name]) {
            var i = 0;
            while (i < spec[name].length) {
                if (semver.satisfies(spec[name][i], blacklist[name].v)) {
                    logger.info({
                        module: name + '@' + spec[name][i]
                    }, 'removing module version');
                    spec[name].splice(i, 1);
                }
                else
                    i++;
            }
            if (spec[name].length === 0) {
                logger.info({
                    module: name
                }, 'removing module');
                delete spec[name];
            }
        }
    }

    if (options.out) {
        fs.writeFileSync(options.out, JSON.stringify(spec, null, 2), 'utf8');
        logger.info({ out: options.out }, 'writing output file');
    }
    logger.info('finished with no errors');
}


function update_action(options) {
    options.spec = options.spec || path.join(__dirname, 'packages.json');

    logger.info({
        spec: options.spec,
        concurrent: options.concurrent
    }, 'udpate-spec start');

    var spec = require(path.resolve(options.spec));
    var errors = {};
    async.eachLimit(Object.keys(spec), options.concurrent, function (name, callback) {
        var npm_info = '';
        async.series([
            function (callback) {
                // run npm to get the the spec version
                var npm = spawn(npm_bin, ['view', name, '--json'], {
                    env: process.env,
                    stdio: [process.stdin, 'pipe', process.stderr]
                });
                npm.stdout.on('data', function (d) { npm_info += d; });
                npm.once('close', function (code) {
                    code ? npm.emit('done', new Error('npm exit code ' + code)) : npm.emit('done');
                });
                npm.once('error', function (e) { npm.emit('done', e); });
                npm.once('done', callback);
            },
            function (callback) {
                try {
                    npm_info = JSON.parse(npm_info);
                }
                catch (e) {
                    return callback(e);
                }
                var present = false;
                for (var i = 0; i < spec[name].length; i++) {
                    if (spec[name][i] === npm_info.version) {
                        present = true;
                        break;
                    }
                }
                if (present) {
                    logger.info({
                        latest: npm_info.version,
                        module: name
                    }, 'module is up to date');
                }
                else {
                    logger.info({
                        latest: npm_info.version,
                        module: name
                    }, 'adding latest module version');
                    spec[name].unshift(npm_info.version);
                }
                callback();
            },
        ], function (error) {
            if (error) {
                logger.error({
                    error: (error.message || error.stack || error.toString()),
                    module: name
                }, 'error inspecting a module');
                errors[name] = error instanceof Error ? error.message : error;
                callback();
            }
            else {
                logger.info({
                    module: name
                }, 'updated module');
                callback();
            }
        });
    }, function (error) {
        if (error) {
            logger.error(error);
            process.exit(1);
        }
        if (Object.keys(errors).length > 0) {
            logger.error(errors, 'failed to update some modules');
            if (options.errors) {
                fs.writeFileSync(options.errors, JSON.stringify(errors, null, 2), 'utf8');
            }
            process.exit(2);
        }
        else {
            if (options.out) {
                fs.writeFileSync(options.out, JSON.stringify(spec, null, 2), 'utf8');
            }
            logger.info(spec, 'finished with no errors');
        }
    });
}

